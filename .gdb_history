p binding
p value
p path
p value
continue
p scope
p *scope
continue
p scope
p *scope
p scope
p scope
p *scope
p text_src

p text_src
ontinue
continue
p val
p *val
p buffer
p *buffer
continue
continue
p self.scope
p *self.scope
continue
continue
p *self.scope
continue
p scope
up
continue
continue
p scope
p *scope
continue
p scope
p scope
cont
p *self.scope
continue
p scope
p scope
p *scope
p &scope
p *scope
continue
p scope
p *scope
p item
p y
p *y
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
p *scope
continue
continue
continue
continue
p *scope
continue
p scope
p *scope
continue
p scope
p *scope
continue
        match scope.lookup(&"x".into()) {
            Some(x) => {
                let y = x;
                let z = y;
                eprintln!("{z:?}");
            }
            None => {}
        }

p *scope
p *scope
        text "data {
p *scope
p *scope
p scope
continue
p *scope
continue
p self.active_scope
p self.active_loop 
p self.inner
p self.inner[0
p self.inner[0]
p scope
p *scope
continue
continue
p self.active_loop 
cont
cont
cont
p *scope
p self.active_loop 
p *scope
p self.active_loop
p scope
continue
p self.active_loop 
p active_loop
p *scope
p *scope
p data
p data.scope
p *data.scope
p *scope
p self.expr_index 
p self.expr_index
p loop_node.body.expr_index
continue
p expr_index 
p self.expr_index 
p self.active_loop 
p expr
p *expr
p *expr
p * scope
p state
p *scope
p *data.scope
p data.scope
p context.scope
p *context.scope
p widget.kind()
p *context.scope
p *data.scope
p *data.scope
p self.text
p buffer
p *buffer
continue
p *path
p *data.scope
up
p *scope
up
p *scope
up
up
up
up
p children
p children
p *children
p self.expr_index 
p self.active_loop 
p scope
p *scope
p *scope
p *scope
p scope
p *scope
p node.ident
p node.ident
continue 
p node.ident
p ctx
p data.scope
p *data.scope
p path
p *path
p path
p *path
p *path
p val
p *val
p *self.scope
p *buffer
continue
continue
p self.text
p data
p list
p *list
p data.csope
p *data.scope
continue
continue
continue
continue
continue
run
continue 
continue 
continue 
continue 
continue
continue
continue
continue
p *scope
p *scope
p scope
continue
continue 
con
cont
continue 
continue
continue
p *scope
continue
continue
p *scope
continue
p *scope
cont
continue
continue
continue 
continue
continue
continue
p *scope
up
p *scope
continue 
cont
cont
p *scope
cont
p *scope
continue 
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
