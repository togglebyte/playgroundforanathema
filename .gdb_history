            }
            None => {}
        }

p *scope
p *scope
        text "data {
p *scope
p *scope
p scope
continue
p *scope
continue
p self.active_scope
p self.active_loop 
p self.inner
p self.inner[0
p self.inner[0]
p scope
p *scope
continue
continue
p self.active_loop 
cont
cont
cont
p *scope
p self.active_loop 
p *scope
p self.active_loop
p scope
continue
p self.active_loop 
p active_loop
p *scope
p *scope
p data
p data.scope
p *data.scope
p *scope
p self.expr_index 
p self.expr_index
p loop_node.body.expr_index
continue
p expr_index 
p self.expr_index 
p self.active_loop 
p expr
p *expr
p *expr
p * scope
p state
p *scope
p *data.scope
p data.scope
p context.scope
p *context.scope
p widget.kind()
p *context.scope
p *data.scope
p *data.scope
p self.text
p buffer
p *buffer
continue
p *path
p *data.scope
up
p *scope
up
p *scope
up
up
up
up
p children
p children
p *children
p self.expr_index 
p self.active_loop 
p scope
p *scope
p *scope
p *scope
p scope
p *scope
p node.ident
p node.ident
continue 
p node.ident
p ctx
p data.scope
p *data.scope
p path
p *path
p path
p *path
p *path
p val
p *val
p *self.scope
p *buffer
continue
continue
p self.text
p data
p list
p *list
p data.csope
p *data.scope
continue
continue
continue
continue
continue
run
continue 
continue 
continue 
continue 
continue
continue
continue
continue
p *scope
p *scope
p scope
continue
continue 
con
cont
continue 
continue
continue
p *scope
continue
continue
p *scope
continue
p *scope
cont
continue
continue
continue 
continue
continue
continue
p *scope
up
p *scope
continue 
cont
cont
p *scope
cont
p *scope
continue 
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
cont
p *scope
continue
run
p val
p val
p value_ref
p value_Ref
p value_ref
p self.expr
p self.expr.to_String
p self.expr.to_string()
p self.expr.to_string
p lhs
continue
run
p lhs
p *rhs
p rhs
p **rhs
run
continue
run
continue
run
up
p self
p *self
up
p ident
cont
p ident
p text
up
p self.text
continue
continue
continue
p self.text
p resolver.is_deferred
p self
p *self
continue
p *self
continue 
p *self
p resolver.is_deferred 
p inner
p expr
p val
continue
p resolver.is_deferred
p resolver.is_deferred 
p resolver.is_deferred 
p resolver.is_deferred 
p val
p expr
run
p expr
p value_ref
p inner
p inner
up
up
p scope
p self.text
p inner
p self
p *self
p expr
p resolver.is_deferred 
p resolver.is_deferred 
cont
cont
p change
cont
p change
continue 
p change
cont
cont
p node_id
p change
cont
delete all
cont
